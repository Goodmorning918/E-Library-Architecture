@startuml
set separator none
title Cart - Dynamic

skinparam {
  arrowFontSize 10
  defaultTextAlignment center
  wrapWidth 200
  maxMessageSize 100
}

hide stereotype

skinparam sequenceParticipant<<Cart.CartDatabase>> {
  BackgroundColor #8e44ad
  FontColor #ffffff
  BorderColor #632f79
  shadowing false
}
skinparam sequenceParticipant<<Cart.CartMicroservice>> {
  BackgroundColor #27ae60
  FontColor #ffffff
  BorderColor #1b7943
  shadowing false
}
skinparam sequenceParticipant<<Cart.CartSPA>> {
  BackgroundColor #27ae60
  FontColor #ffffff
  BorderColor #1b7943
  shadowing false
}
skinparam sequenceParticipant<<Finance.FinanceMicroservice>> {
  BackgroundColor #27ae60
  FontColor #ffffff
  BorderColor #1b7943
  shadowing false
}
skinparam sequenceParticipant<<Products.ProductsDatabase>> {
  BackgroundColor #8e44ad
  FontColor #ffffff
  BorderColor #632f79
  shadowing false
}
skinparam sequenceParticipant<<Products.ProductsMicroservice>> {
  BackgroundColor #27ae60
  FontColor #ffffff
  BorderColor #1b7943
  shadowing false
}
skinparam sequenceParticipant<<Reader>> {
  BackgroundColor #28b463
  FontColor #ffffff
  BorderColor #1c7d45
  shadowing false
}
skinparam sequenceParticipant<<Recommendations.RecommendationsMicroservice>> {
  BackgroundColor #27ae60
  FontColor #ffffff
  BorderColor #1b7943
  shadowing false
}

actor "Reader\n<size:10>[Person]</size>" as Reader <<Reader>> #28b463
participant "Cart SPA\n<size:10>[Container: React Component]</size>" as Cart.CartSPA <<Cart.CartSPA>> #27ae60
participant "Cart Microservice\n<size:10>[Container: Java and Spring Boot]</size>" as Cart.CartMicroservice <<Cart.CartMicroservice>> #27ae60
database "Cart Database\n<size:10>[Container: MongoDB]</size>" as Cart.CartDatabase <<Cart.CartDatabase>> #8e44ad
participant "Products Microservice\n<size:10>[Container: Java and Spring Boot]</size>" as Products.ProductsMicroservice <<Products.ProductsMicroservice>> #27ae60
database "Products Database\n<size:10>[Container: MongoDB]</size>" as Products.ProductsDatabase <<Products.ProductsDatabase>> #8e44ad
participant "Finance Microservice\n<size:10>[Container: Java and Spring Boot]</size>" as Finance.FinanceMicroservice <<Finance.FinanceMicroservice>> #27ae60
participant "Recommendations Microservice\n<size:10>[Container: Java and Spring Boot]</size>" as Recommendations.RecommendationsMicroservice <<Recommendations.RecommendationsMicroservice>> #27ae60
Reader -[#2980b9]> Cart.CartSPA : Finalizes cart
Cart.CartSPA -[#2980b9]> Cart.CartMicroservice : Processes cart finalization
Cart.CartMicroservice -[#2980b9]> Cart.CartDatabase : Retrieves cart details
Cart.CartMicroservice <-[#2980b9]- Cart.CartDatabase : Returns cart details
Cart.CartMicroservice -[#2980b9]> Products.ProductsMicroservice : Checks item availability
Products.ProductsMicroservice -[#2980b9]> Products.ProductsDatabase : Verifies product availability
Products.ProductsMicroservice <-[#2980b9]- Products.ProductsDatabase : Returns availability status
Cart.CartMicroservice <-[#2980b9]- Products.ProductsMicroservice : Provides availability details
Cart.CartMicroservice -[#2980b9]> Finance.FinanceMicroservice : Generates payment link
Cart.CartMicroservice <-[#2980b9]- Finance.FinanceMicroservice : Returns payment link
Cart.CartMicroservice -[#2980b9]> Recommendations.RecommendationsMicroservice : Finalizes recommendations
Cart.CartMicroservice <-[#2980b9]- Recommendations.RecommendationsMicroservice : Acknowledges finalization
Cart.CartSPA <-[#2980b9]- Cart.CartMicroservice : Presents payment link
Reader <-[#2980b9]- Cart.CartSPA : Displays transaction details
@enduml