@startuml
set separator none
title Products - Dynamic

skinparam {
  arrowFontSize 10
  defaultTextAlignment center
  wrapWidth 200
  maxMessageSize 100
}

hide stereotype

skinparam sequenceParticipant<<Products.ProductsDatabase>> {
  BackgroundColor #26a69a
  FontColor #ffffff
  BorderColor #1a746b
  shadowing false
}
skinparam sequenceParticipant<<Products.ProductsMicroservice>> {
  BackgroundColor #26a69a
  FontColor #ffffff
  BorderColor #1a746b
  shadowing false
}
skinparam sequenceParticipant<<Products.ProductsSPA>> {
  BackgroundColor #26a69a
  FontColor #ffffff
  BorderColor #1a746b
  shadowing false
}
skinparam sequenceParticipant<<Reader>> {
  BackgroundColor #00796b
  FontColor #ffffff
  BorderColor #00544a
  shadowing false
}

actor "Reader\n<size:10>[Person]</size>" as Reader <<Reader>> #00796b
participant "Products SPA\n<size:10>[Container: React Component]</size>" as Products.ProductsSPA <<Products.ProductsSPA>> #26a69a
participant "Products Microservice\n<size:10>[Container: Java and Spring Boot]</size>" as Products.ProductsMicroservice <<Products.ProductsMicroservice>> #26a69a
database "Products Database\n<size:10>[Container: MongoDB]</size>" as Products.ProductsDatabase <<Products.ProductsDatabase>> #26a69a
Reader -[#004d40]> Products.ProductsSPA : Requests available books list
Products.ProductsSPA -[#004d40]> Products.ProductsMicroservice : Fetches available books
Products.ProductsMicroservice -[#004d40]> Products.ProductsDatabase : Retrieves available books
Products.ProductsMicroservice <-[#004d40]- Products.ProductsDatabase : Returns available books
Products.ProductsSPA <-[#004d40]- Products.ProductsMicroservice : Returns book data
Reader <-[#004d40]- Products.ProductsSPA : Displays available books list
@enduml